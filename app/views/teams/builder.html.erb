<% content_for :head do %>
  <%= stylesheet_link_tag 'wijmo' %>
  <%= javascript_include_tag 'wijmo' %>
  <%= javascript_include_tag 'knockout-sortable.js' %>
  
  <style type="text/css">
  html, body { height:100%;}  
body { font-family:arial; padding:0; margin:0 }

  .panel { border: 0px; position: relative; padding-top:1.5em }
  .panelLabel { background-color:#000000; color:#ffffff; border-radius: 0px 0px 5px 0px; padding:0px 8px 4px 8px; position:absolute; top:0px; left:0px; height:1em; }
  
  .team {
    float:left;
    text-align: center;
    padding:0px;
    margin:5px;
    min-width: 126px; 
    border-radius: 7px;
    box-shadow: 2px 2px 2px #999;
  }
  .teamhead {
    color:white;
    background:black;
    border-radius: 5px 5px 0px 0px;	
    margin:0px;	
    padding:2px;
  }

  .membership {
    border: solid 3px #ddd;
    min-height: 100px;
    background-color: #ddd;
    border-radius: 0px 0px 5px 5px;
    padding: 2px;
  }
  
  .member {
    background-color: #444;
    color: #fff;
    border-radius: 3px;
    margin: 2px;
    padding: 6px 14px;
    text-align: center;
    cursor: move;
    min-width:120px;
  }
  
  .container {
    min-height:3em;
    border: solid 1px #999;
    border-radius: 5px;
    height:100%;
  }
  .container div
  {
    display: inline-block;
  }
  
  #newTeam { opacity:0.2; }
  
  .clr { clear:both; }
  </style>
<% end %>

<script type="text/html" id="responderTmpl">
  <div class="member">
    <span data-bind="text: firstname + ' ' + lastname + ' -- ' + current.status()"></span>
  </div>
</script>

<div id="main">
  <div id="leftWrapper">
    <div id="leftPanel" >
      <div id="stagingPanel" class="panel" data-bind="sortable: { template: 'responderTmpl', data: staging, afterMove: $root.dropContainer }">
        <span class="panelLabel">Staging</span>
      </div>
      <div id="basePanel" class="panel" data-bind="sortable: { template: 'responderTmpl', data: base, afterMove: $root.dropContainer }">
        <span class="panelLabel">Base</span>
      </div>
    </div>
  </div>
  <div class="panel" id="fieldPanel">
    <!-- ko foreach: teams -->
    <div class="team">
      <div data-bind="text: name" class="teamhead"></div>
      <div class="membership" data-bind="sortable: { template: 'responderTmpl', data: members, afterMove: $root.dropTeam }"></div>
    </div>
    <!-- /ko -->
    <div class="team" data-bind="with: newTeam" id="newTeam">
      <div data-bind="text: name" class="teamhead"></div>
      <div class="membership" data-bind="sortable: { template: 'responderTmpl', data: members, afterMove: $root.dropNew }"></div>
    </div>
    <span class="panelLabel">Field Teams <span data-bind="if: isLoading">-- loading</span></span>
  </div>
</div>

<div id="mainx">
</div>
<div class="clr"></div>

<script type="text/javascript">

ko.bindingHandlers.sortable.options = { appendTo: document.body, helper: 'clone' };

var ResponderStatus = function(apiModel)
{
  this.status = ko.observable(apiModel.status);
}

var Responder = function(apiModel)
{
  this.id = apiModel.id;
  this.firstname = apiModel.firstname;
  this.lastname = apiModel.lastname;
  this.current = new ResponderStatus(apiModel.current);
}

var Team = function(apiModel)
{
  this.id = apiModel.id;
  this.name = apiModel.name;
  this.members = ko.observableArray($.map(apiModel.members, function(m) { return new Responder(m); }));
  this.members.team = this;
}

var AppModel = function(mission)
{
  var self = this;
  this.mission = mission;
  this.isLoading = ko.observable(false);

  this.teams = ko.observableArray([]);	
  this.staging = ko.observableArray([]);
  this.staging.targetStatus = "signedin";
  this.base = ko.observableArray([]);
  this.base.targetStatus = "assigned";
  
  this.newTeam = ko.observable(new Team({name:"New Team", members:[]}));
  
  this.dropContainer = function(arg) {
    console.log("drop base");
    self.setResponderStatus(arg.item, arg.targetParent.targetStatus);
    keep = self.emptyTeamQuery(arg.sourceParent);
    self.isLoading(true);
    $.ajax({type:'PUT', url: siteRoot+'missions/' + self.mission.id + '/responders/' + arg.item.id + '/team/' + arg.targetParent.id + '.json' + (keep ? '?keep_team=true' : '')  })
      .done(function(data) {
self.load();
      }).always(function() { self.isLoading(false) });
  }

  this.dropNew = function(arg) {
    var name = prompt("Team Name:");
    var team = new Team({name: name, members: []});

    team.members.push(arg.item);
    
    self.teams.push(team);
    arg.targetParent.removeAll();		
    
    self.setResponderStatus(arg.item, 'assigned');
    keep = self.emptyTeamQuery(arg.sourceParent);
    self.isLoading(true);
    $.ajax({type:'PUT', url: siteRoot+'missions/' + self.mission.id + '/responders/' + arg.item.id + '/team.json' + (keep ? '?keep_team=true' : ''), data: {is_leader: true, team: {name: name}} })
      .done(function(data) {
        self.load();
      }).always(function() { self.isLoading(false) });
    
    console.log("drop New for " + name);
  }

  this.dropTeam = function(arg) {
    console.log("drop into team");
    self.setResponderStatus(arg.item, 'assigned');
    keep = self.emptyTeamQuery(arg.sourceParent);
    self.isLoading(true);
    $.ajax({type:'PUT', url: siteRoot+'missions/' + self.mission.id + '/responders/' + arg.item.id + '/team/' + arg.targetParent.team.id + '.json' + (keep ? '?keep_team=true' : '') })
      .done(function(data) {
self.load();
      }).complete(function() { self.isLoading(false) });
  }
  
  this.setResponderStatus = function(responder, newStatus)
  {
    responder.current.status(newStatus);
  }
  
  this.emptyTeamQuery = function(teamList)
  {
    if (teamList && teamList.team && teamList().length == 0)
    {
      if (confirm('OK: Remove empty team "' + teamList.team.name + '"\nCancel: Keep team'))
      {
        self.teams.remove(teamList.team);
        return false;
      }
    }
    return true;
  }
  
  this.load = function()
  {
    $.ajax({type:'GET', url: siteRoot+'missions/' + self.mission.id + '/teams.json' })
      .done(function(data) {
        self.base.id = data.base[0].id;
        self.staging.id = data.staging[0].id;

        self.staging($.map(data.staging[0].members, function(m) {
          return new Responder(m);
        }));
        self.teams($.map(data.field, function(t) {
          return new Team(t);
        }));
        self.base($.map(data.base[0].members, function(m) { return new Responder(m); } ));
      });
  }

  $('body').bind('msg_responders/update', function(evt, data) {
    if (self.mission.id != data.mission_id) return;
     self.load();
  });

}

$(document).ready(function() {
  $("#main").wijsplitter({
    orientation: "vertical",
    fullSplit: true,
    panel1: { minSize: 50 },
    panel2: { minSize: 50 },
    showExpander: false,
    sized: function() { $('#leftPanel').wijsplitter('refresh', true, false); },
    splitterDistance: 300
  });
  $('#leftPanel').wijsplitter({
    orientation: "horizontal",
    fullSplit: true,
    panel1: { minSize: 50 },
    panel2: { minSize: 50 },
    showExpander: false,
    splitterDistance: 500
  });
  
  model = new AppModel(<%= @mission.to_json.html_safe %>);
  model.load();
  ko.applyBindings(model);
});
</script>

